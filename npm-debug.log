0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.24
3 info using node@v0.10.28
4 verbose node symlink /usr/local/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /Users/mhzed/.npm/3a52ce78-.lock
11 verbose tar pack [ '/Users/mhzed/.npm/future/0.0.1/package.tgz', '.' ]
12 verbose tarball /Users/mhzed/.npm/future/0.0.1/package.tgz
13 verbose folder .
14 info prepublish future@0.0.1
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /Users/mhzed/.npm/1f1177db-tar.lock
17 silly lockFile cfa786a7-zed-npm-future-0-0-1-package-tgz tar:///Users/mhzed/.npm/future/0.0.1/package.tgz
18 verbose lock tar:///Users/mhzed/.npm/future/0.0.1/package.tgz /Users/mhzed/.npm/cfa786a7-zed-npm-future-0-0-1-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile cfa786a7-zed-npm-future-0-0-1-package-tgz tar:///Users/mhzed/.npm/future/0.0.1/package.tgz
22 silly lockFile cfa786a7-zed-npm-future-0-0-1-package-tgz tar:///Users/mhzed/.npm/future/0.0.1/package.tgz
23 silly lockFile 416a2b7f-s-mhzed-npm-future-0-0-1-package /Users/mhzed/.npm/future/0.0.1/package
24 verbose lock /Users/mhzed/.npm/future/0.0.1/package /Users/mhzed/.npm/416a2b7f-s-mhzed-npm-future-0-0-1-package.lock
25 silly lockFile 416a2b7f-s-mhzed-npm-future-0-0-1-package /Users/mhzed/.npm/future/0.0.1/package
26 silly lockFile 416a2b7f-s-mhzed-npm-future-0-0-1-package /Users/mhzed/.npm/future/0.0.1/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { name: 'future',
29 silly publish   version: '0.0.1',
29 silly publish   description: 'future utility cancel manipulate timer function',
29 silly publish   main: 'lib/future.js',
29 silly publish   scripts: { test: 'nodeunit test/test.js' },
29 silly publish   repository: { type: 'git', url: 'https://github.com/mhzed/future' },
29 silly publish   keywords: [ 'future', 'cancel', 'timer', 'function' ],
29 silly publish   devDependencies: { nodeunit: '*' },
29 silly publish   author: { name: 'mhzed' },
29 silly publish   license: 'ISC',
29 silly publish   bugs: { url: 'https://github.com/mhzd/future/issues' },
29 silly publish   homepage: 'https://github.com/mhzd/future',
29 silly publish   readme: 'future\n--------\n\nA utility to manipulate javascript timers, because \'setTimeout\' and \'setInterval\' are awkward:\n\n- callBack is the first parameter?!  Especially painful to write in coffeescript.\n- easier to cancel timer\n- easier to readjust timer \n\n## Examples\n    \n    var future = require("future")\n    \n    var onceTask = future.once( msInFuture, runCb)\n    \n    onceTask.cancel();  // cancel timer, will not ever run\n    onceTask.finish();  // if not yet run, run then cancel timer, if already run, no affect\n    onceTask.result();  // whatever runCb() returned\n     \n    var manyTask = future.interval( msInterval, functor)\n    \n    manyTask.cancel();  // cancel timer, will not ever run\n    manyTask.finishAfter(n);  // run n more times, then stop timer\n    manyTask.result();        // whatever most recent runCb() returned\n    manyTask.resetInterval(msInterval/2)  // run twice faster!\n    \n    \n    \n    \n     \n    \n    \n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   _id: 'future@0.0.1',
29 silly publish   _shasum: '52aa1ebaa2dc60facf6cf66e95d05aad5e217f95',
29 silly publish   _from: '.' }
30 verbose request where is /future
31 verbose request registry https://registry.npmjs.org/
32 verbose request id 9601dc8b4d4d220f
33 verbose url raw /future
34 verbose url resolving [ 'https://registry.npmjs.org/', './future' ]
35 verbose url resolved https://registry.npmjs.org/future
36 verbose request where is https://registry.npmjs.org/future
37 info trying registry request attempt 1 at 15:17:03
38 http PUT https://registry.npmjs.org/future
39 http 403 https://registry.npmjs.org/future
40 verbose headers { date: 'Tue, 04 Nov 2014 07:17:05 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '5743',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-hk92-HKG',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1415085424.654991,VS0,VE681',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden user: mhzed not authorized to modify future
42 error Changed: description "The promise / subscribe / deferred module of FuturesJS (Ender.JS and Node.JS)" -> "future utility cancel manipulate timer function"
42 error Changed: dist-tags.latest "2.3.1" -> "0.0.1"
42 error Added: versions.0.0.1
42 error Changed: time.modified "2012-05-31T15:34:39.781Z" -> "2014-11-04T07:18:33.334Z"
42 error Added: time.0.0.1
42 error Changed: author.name "AJ ONeal" -> "mhzed"
42 error Deleted: author.email
42 error Deleted: author.url
42 error Changed: repository.url "git://github.com/coolaj86/futures.git" -> "https://github.com/mhzed/future"
42 error Changed: readme "Future\u000a----\u000a\u000aCreates a Future (aka Promise, Deferred, Subscription, Callback) object.\u000a\u000aInstallation\u000a---\u000a\u000aNode.JS (Server):\u000a\u000a    npm install future\u000a\u000aEnder.JS (Browser):\u000a\u000a    ender build future\u000a\u000aUsage\u000a---\u000a\u000a    var context = { \"foo\": \"bar\" }\u000a      , Future = require('future')\u000a      , future = Future.create(context)\u000a      , err\u000a      , message = \"Hello World!\"\u000a      ;\u000a\u000a    future.whenever(function (error, data) {\u000a      if (error) {\u000a        throw err;\u000a      }\u000a      console.log(this.foo + \" says: \" + data);\u000a    });\u000a\u000a    future.setTimeout(100);\u000a    future.deliver(err, message);\u000a\u000aOutput:\u000a\u000a    \"bar says: Hello World\"\u000a    FutureTimeout: timeout 100ms\u000a        at [object SomeObject]:x:y\u000a        ...\u000a\u000aAPI\u000a---\u000a\u000aCreates a Future (aka Promise, Deferred, Subscription, Callback) object.\u000a\u000a**Core**\u000a\u000a  * `Futures.future(globalContext=null)` - creates a `Future` object and uses `globalContext` as the default `this` for callbacks\u000a\u000a  * `deliver(err, data, ...)` - Send a message (data) to all listeners (callbacks)\u000a\u000a  * `fulfill([err, data, ...])` - Prevent the sending of any future messages. If arguments are passed they will be `deliver`ed.\u000a\u000a  * `whenever(callback, [context])` - Listen to all messages, applying `context` if provided (passing `null` cancels `globalContext`)\u000a\u000a  * `when(callback, [context])` - Listen one-time only, then `removeCallback` automatically\u000a\u000a  * `setTimeout(ms)` - will sends a `FutureTimeout` error if no activity occurs within `ms`\u000a\u000a\u000a**Accessory**\u000a\u000a  * `errback(err)` - Useful for a peer-library requiring a method specifically for errbacks\u000a    * i.e. `jQuery`'s `$.ajax`\u000a\u000a  * `callback(data [, ...])` - Useful for a peer-library requiring a method which does not pass `err` as the first parameter\u000a    * i.e. `jQuery`'s `$.ajax`\u000a\u000a  * `removeCallback(callback, context=null)` - This callback and associated context will no longer receive messages\u000a\u000a  * `setAsap(on=true)` - New listeners get existing data (if available) rather than waiting until the next delivery (default on)\u000a\u000a  * `isFuture(obj)` - a best-effort guess as to whether or not an object is a Future\u000a\u000a  * `callbackCount(callback, context)` - The number of listening callbacks\u000a\u000a  * `deliveryCount(callback, context)` - The number of deliveries made\u000a\u000a  * `hasCallback(callback, context=null)` - Returns `true` if the callback is listening\u000a\u000a\u000aExample\u000a---\u000a\u000a    var context = { \"foo\": \"bar\" },\u000a      future = Futures.future(context),\u000a      err,\u000a      message = \"Hello World!\";\u000a\u000a    future.whenever(function (error, data) {\u000a      if (error) {\u000a        throw err;\u000a      }\u000a      console.log(this.foo + \" says: \" + data);\u000a    });\u000a\u000a    future.setTimeout(100);\u000a    future.deliver(err, message);\u000a\u000aOutput:\u000a\u000a    \"bar says: Hello World\"\u000a    FutureTimeout: timeout 100ms\u000a        at [object SomeObject]:x:y\u000a        ...\u000a\u000a" -> "future\u000a--------\u000a\u000aA utility to manipulate javascript timers, because 'setTimeout' and 'setInterval' are awkward:\u000a\u000a- callBack is the first parameter?!  Especially painful to write in coffeescript.\u000a- easier to cancel timer\u000a- easier to readjust timer \u000a\u000a## Examples\u000a    \u000a    var future = require(\"future\")\u000a    \u000a    var onceTask = future.once( msInFuture, runCb)\u000a    \u000a    onceTask.cancel();  // cancel timer, will not ever run\u000a    onceTask.finish();  // if not yet run, run then cancel timer, if already run, no affect\u000a    onceTask.result();  // whatever runCb() returned\u000a     \u000a    var manyTask = future.interval( msInterval, functor)\u000a    \u000a    manyTask.cancel();  // cancel timer, will not ever run\u000a    manyTask.finishAfter(n);  // run n more times, then stop timer\u000a    manyTask.result();        // whatever most recent runCb() returned\u000a    manyTask.resetInterval(msInterval/2)  // run twice faster!\u000a    \u000a    \u000a    \u000a    \u000a     \u000a    \u000a    \u000a"
42 error Changed: readmeFilename "" -> "README.md"
42 error Changed: homepage "https://github.com/coolaj86/futures" -> "https://github.com/mhzd/future"
42 error Changed: keywords.0 "flow-control" -> "future"
42 error Changed: keywords.1 "async" -> "cancel"
42 error Changed: keywords.2 "asynchronous" -> "timer"
42 error Changed: keywords.3 "futures" -> "function"
42 error Deleted: keywords.4
42 error Deleted: keywords.5
42 error Deleted: keywords.6
42 error Deleted: keywords.7
42 error Added: bugs
42 error Added: license
42 error Added: _attachments: future
42 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
42 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
42 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:123:22)
42 error     at Request.EventEmitter.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:893:14)
42 error     at Request.EventEmitter.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:844:12)
42 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
42 error     at _stream_readable.js:919:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Darwin 14.0.0
45 error command "node" "/usr/local/bin/npm" "publish"
46 error cwd /Users/mhzed/dev/dev.p/node/projects/node_modules/future
47 error node -v v0.10.28
48 error npm -v 1.4.24
49 verbose exit [ 1, true ]
