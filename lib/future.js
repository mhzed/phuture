// Generated by CoffeeScript 1.8.0
(function() {
  var ManyFuture, OnceFuture;

  OnceFuture = (function() {
    function OnceFuture(ms, cb) {
      this.ms = ms;
      this.cb = cb;
      this.runTime = (function(_this) {
        return function() {
          _this.res = _this.cb();
          return _this.timer = null;
        };
      })(this);
      this.timer = setTimeout(this.runTime, this.ms);
    }

    OnceFuture.prototype.cancel = function() {
      if (this.isDone()) {
        return false;
      }
      clearTimeout(this.timer);
      this.timer = void 0;
      return true;
    };

    OnceFuture.prototype.finish = function() {
      if (this.isDone()) {
        return false;
      }
      clearTimeout(this.timer);
      this.runTime();
      return true;
    };

    OnceFuture.prototype.result = function() {
      return this.res;
    };

    OnceFuture.prototype.isDone = function() {
      return this.timer === void 0 || this.timer === null;
    };

    OnceFuture.prototype.isCancelled = function() {
      return this.timer === void 0;
    };

    return OnceFuture;

  })();

  ManyFuture = (function() {
    function ManyFuture(ms, maxRun, cb) {
      this.ms = ms;
      this.maxRun = maxRun;
      this.cb = cb;
      this.n = 0;
      this.runTime = (function(_this) {
        return function() {
          _this.res = _this.cb();
          _this.n++;
          if (_this.n === _this.maxRun) {
            if (_this.finishCb) {
              _this.finishCb();
            }
            if (_this.n === _this.maxRun) {
              clearInterval(_this.timer);
              return _this.timer = null;
            }
          }
        };
      })(this);
      this.timer = setInterval(this.runTime, this.ms);
    }

    ManyFuture.prototype._remainTimes = function() {
      return this.maxRun - this.n;
    };

    ManyFuture.prototype.cancel = function() {
      if (this.isDone()) {
        return false;
      }
      clearInterval(this.timer);
      this.timer = void 0;
      return true;
    };

    ManyFuture.prototype.finish = function() {
      if (this.isDone()) {
        return false;
      }
      clearInterval(this.timer);
      this.res = this.cb();
      this.n++;
      this.timer = null;
      return true;
    };

    ManyFuture.prototype.finishAfter = function(n, finishCb) {
      this.finishCb = finishCb;
      return this.maxRun = this.n + n;
    };

    ManyFuture.prototype.result = function() {
      return this.res;
    };

    ManyFuture.prototype.isDone = function() {
      return this.timer === void 0 || this.timer === null;
    };

    ManyFuture.prototype.isCancelled = function() {
      return this.timer === void 0;
    };

    ManyFuture.prototype.resetInterval = function(ms) {
      this.ms = ms;
      if (this.timer) {
        clearInterval(this.timer);
        return this.timer = setInterval(this.runTime, this.ms);
      }
    };

    return ManyFuture;

  })();

  module.exports = {
    once: function(msInFuture, runCb) {
      return new OnceFuture(msInFuture, runCb);
    },
    interval: function(msInterval, runCb) {
      return new ManyFuture(msInterval, -1, runCb);
    }
  };

}).call(this);

//# sourceMappingURL=future.js.map
